---
layout: post
title:  rxjs的悲剧：分化的前端圈
date:   2016-10-14 23:59:59
categories: program
---

前端其实有很多项目，小到一个但页面，大可以说到一个系统工程，所以，大家在一个纬度上讨论问题本身就需要有对话的基础能力来依托。

比如Promise行为，在多年前，都是强行推广的，毕竟不用Promise也可以做很多事，农耕田园阶段用Callback也可以让系统跑起来。

但是倘若业务多有个入口数据源，那么Observable的能力就凸显出来了，再复杂的逻辑就处理即可，多重有条件异步处理，Observable能解决太多业务问题了

那么问题来了，大家理解这个'多重异步'，就可以讨论问题，可是不理解的话，我们讲再多流操作，都无用，不在一个对话层面。


所以，很多小应用，大家初次用了Redux之后，对干净的数据流控制异常欣喜。

当项目进入工程化阶段的时刻，怎么处理异步操作？怎么控制大量数据节点变化导致的疯狂刷出新state？

当然，有解。

不过既然有更好的解法，何必纠结在难受的处理方式上。

哎，我总会记得以前踩过的坑，技术布道非我所愿。






























