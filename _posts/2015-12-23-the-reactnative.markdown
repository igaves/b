---
layout: post
title:  扯一下reactjs,真正的解决方案，是react吗？
date:   2015-12-23 17:21:30 +0800
categories: it 
---

无聊说一下reactjs
其实我是比较早的接触react的，但是用了几天去理解了一下react的设计思路，感觉这个框架并没有get到真正的web开发痛点

前端开发有个通病就是，以用新的东西为炫耀的资本，并且沾沾自喜。
因为前端技术更新太快，并且随着浏览器和移动端的进步，很多技术栈都属于被迫更新，轮子被疯狂的制造出来，大家疯狂的给正在行进中的汽车进行换胎。

但是一门后端的编程语言，经过很多年的积累，已经稳定的无法进行大规模更替，所以大家都在用语言解决问题。

那么我们聊一下解决问题这件事

那么reactjs解决了什么问题?

###我认为react解决的问题，就是给很多浮躁的开发者一个意淫的空间

首先react想走一条模块化组件设计之路，那么有很多的html代码，要根据模块的功能进行拆分成碎片

html进行碎片化后，css必然也要跟着拆分，但是css的复用原理和html的复用原理完全不同，css有一种继承的关系存在，引入sass等编译型引擎后，更加注重于混合，继承，抽象的概念，但是dom树，是结构性存在，重复的结构或许对于css来讲，是不同的作用空间

第一个纠结点，就是，脱离了渲染引擎存在的组件化，都变相的提高了复杂度。
那么可以说，react只有在比较简单的移动端，才能稍微有一席之地。

第二个，其实react想做的一件事，就是让web开发，都恰似原生开发那么简单，工程化，测试自动化等等，这就给前端一个意淫的空间了，很多不想去学习移动端，或者做移动端开发思路迁移不过来的人，基本上都会突然兴奋说前端终于可以一次性搞定了

###殊不知，移动端开发其实更加简单，在我看来，移动端的开发成本是远远低于web开发的

所以，react走向了一条不归路，就是reactnative，又在jsx上设计出了简化版的css。
但是从开发成本上来讲，原生应用的开发成本，远远低于react去适配（这个无法解释，直接做一次就能理解）
如果说reactnative效率很高，那么肯定低于原生应用，高于普通的webview，但是，回头想，普通的webview效率差在那里吗？

确实差得很多，一个20ms渲染，一个40ms渲染。

但是60ms之下的渲染速度，人的肉眼，是无法分辨的。

###效率提升在人的感知之外，是无意义的

不得不说，react确实是一种很优秀的设计理念，这种设计理念肯定会在其他框架上被继承，被发扬光大

但是react绝对不是解决方案，只是暂时性的能促进前端从业民工快速进入高潮的一个手段。

真正的解决方案来临的时候，react，将会如被剥光了底裤的贵妇人惶惶逃离。

但是，react精神永存，这代表我们这波前端开发者不折腾不舒服斯基的态度。


