<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>莫大艺术家</title>
    <description>胡言乱写,艺术人生。
</description>
    <link>http://igaves.com/</link>
    <atom:link href="http://igaves.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 02 Jan 2016 01:49:42 +0800</pubDate>
    <lastBuildDate>Sat, 02 Jan 2016 01:49:42 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Android开发vs前端开发</title>
        <description>&lt;p&gt;&lt;img src=&quot;/public/images/2016-01-01/android-web.jpg&quot; alt=&quot;2015最后一张照片&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Android &amp;amp; Web&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于媳妇是Android系统级别的设计师,所以断断续续的在研究安卓
最近下定决心彻底深入一下
github上拉了几个项目在研究,也写了不少demo
那么总结一下如图上述&lt;/p&gt;

&lt;p&gt;还是不自觉的用前端技术去套用理论上去&lt;/p&gt;

&lt;p&gt;还好差距不大,总归android是比较简单的一门技术&lt;/p&gt;

&lt;p&gt;前端行业其实是一个很混乱的圈子..&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java就恰似美国,各种条条框框,大家稳定且一片祥和&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;前端就恰似中东,一会你革了我的命,一会他又革了你的命,你说是塔利班厉害,还说ISIS厉害?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;萨达姆倒下了,本拉登也倒下了,叙利亚不知道啥时候倒下..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;一天一个样.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作为一个同时喜欢Ruby&amp;amp;和Java的开发,其实感觉很奇怪..&lt;/p&gt;

&lt;p&gt;在ruby-china上接触的开发,一水的反Java联盟..&lt;/p&gt;

&lt;p&gt;我怎么感觉..我是叛徒?&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Jan 2016 20:59:59 +0800</pubDate>
        <link>http://igaves.com/it/2016/01/01/andoir-and-front-end.html</link>
        <guid isPermaLink="true">http://igaves.com/it/2016/01/01/andoir-and-front-end.html</guid>
        
        
        <category>it</category>
        
      </item>
    
      <item>
        <title>2015最后的照片记录</title>
        <description>&lt;p&gt;&lt;img src=&quot;/public/photo/2015-12/final.jpg&quot; alt=&quot;2015最后一张照片&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2015年最后一张照片,晓锋开车出去溜达,顺便拍.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近比较蛋疼,持续的研究一点比较乱七八糟的东西,不太专注
预计2016年会比今年专注一点
已经过了精力分散的年纪了&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Dec 2015 19:59:59 +0800</pubDate>
        <link>http://igaves.com/photography/2015/12/31/final-photo-of-2015.html</link>
        <guid isPermaLink="true">http://igaves.com/photography/2015/12/31/final-photo-of-2015.html</guid>
        
        
        <category>photography</category>
        
      </item>
    
      <item>
        <title>前端项目选型思考</title>
        <description>&lt;p&gt;经历过好几次项目选型，渐渐的走向了一个略微清晰的思维&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;首先要判断项目类型，是否是需要长期维护的项目&lt;/h2&gt;

&lt;p&gt;1.如果是短时效的项目，尽可能的选用流行的技术&lt;/p&gt;

&lt;p&gt;引入新的概念，新的思想，争取给开发队伍带来不一样的理念和经验，算是人才和技术的积累&lt;/p&gt;

&lt;p&gt;2.如果是长期，并且需要经历人员更替的过程，尽量保守型选择技术栈。&lt;/p&gt;

&lt;p&gt;保守型的技术，也需要考虑扩展性，比如选择了jQuery，也尽量要引入模块化组件，比如amd&amp;amp;cmd等扩展，以便未来技术更替。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;再次要考虑的，就是团队的技术发展方向&lt;/h2&gt;

&lt;p&gt;用一两年来培养的技术氛围是很珍贵的一件事，有利于技术传承，比如擅长大型模块化思维的，擅长数据驱动页面建设的，比如amd，angular，backbone等等，每一种都代表一种思维方式&lt;/p&gt;

&lt;p&gt;再次就是要坚持引入鲶鱼，带动整个队伍的思维更新，切莫让队伍走向一个封闭的氛围。&lt;/p&gt;

&lt;p&gt;以前挖过很多坑，看来很多东西，都是被迫学会的。&lt;/p&gt;

</description>
        <pubDate>Sun, 27 Dec 2015 00:21:30 +0800</pubDate>
        <link>http://igaves.com/it/2015/12/27/how-to-build-a-project.html</link>
        <guid isPermaLink="true">http://igaves.com/it/2015/12/27/how-to-build-a-project.html</guid>
        
        
        <category>it</category>
        
      </item>
    
      <item>
        <title>扯一下reactjs,真正的解决方案，是react吗？</title>
        <description>&lt;p&gt;无聊说一下reactjs
其实我是比较早的接触react的，但是用了几天去理解了一下react的设计思路，感觉这个框架并没有get到真正的web开发痛点&lt;/p&gt;

&lt;p&gt;前端开发有个通病就是，以用新的东西为炫耀的资本，并且沾沾自喜。
因为前端技术更新太快，并且随着浏览器和移动端的进步，很多技术栈都属于被迫更新，轮子被疯狂的制造出来，大家疯狂的给正在行进中的汽车进行换胎。&lt;/p&gt;

&lt;p&gt;但是一门后端的编程语言，经过很多年的积累，已经稳定的无法进行大规模更替，所以大家都在用语言解决问题。&lt;/p&gt;

&lt;p&gt;那么我们聊一下解决问题这件事&lt;/p&gt;

&lt;p&gt;那么reactjs解决了什么问题?&lt;/p&gt;

&lt;h3 id=&quot;react&quot;&gt;我认为react解决的问题，就是给很多浮躁的开发者一个意淫的空间&lt;/h3&gt;

&lt;p&gt;首先react想走一条模块化组件设计之路，那么有很多的html代码，要根据模块的功能进行拆分成碎片&lt;/p&gt;

&lt;p&gt;html进行碎片化后，css必然也要跟着拆分，但是css的复用原理和html的复用原理完全不同，css有一种继承的关系存在，引入sass等编译型引擎后，更加注重于混合，继承，抽象的概念，但是dom树，是结构性存在，重复的结构或许对于css来讲，是不同的作用空间&lt;/p&gt;

&lt;p&gt;第一个纠结点，就是，脱离了渲染引擎存在的组件化，都变相的提高了复杂度。
那么可以说，react只有在比较简单的移动端，才能稍微有一席之地。&lt;/p&gt;

&lt;p&gt;第二个，其实react想做的一件事，就是让web开发，都恰似原生开发那么简单，工程化，测试自动化等等，这就给前端一个意淫的空间了，很多不想去学习移动端，或者做移动端开发思路迁移不过来的人，基本上都会突然兴奋说前端终于可以一次性搞定了&lt;/p&gt;

&lt;h3 id=&quot;web&quot;&gt;殊不知，移动端开发其实更加简单，在我看来，移动端的开发成本是远远低于web开发的&lt;/h3&gt;

&lt;p&gt;所以，react走向了一条不归路，就是reactnative，又在jsx上设计出了简化版的css。
但是从开发成本上来讲，原生应用的开发成本，远远低于react去适配（这个无法解释，直接做一次就能理解）
如果说reactnative效率很高，那么肯定低于原生应用，高于普通的webview，但是，回头想，普通的webview效率差在那里吗？&lt;/p&gt;

&lt;p&gt;确实差得很多，一个20ms渲染，一个40ms渲染。&lt;/p&gt;

&lt;p&gt;但是60ms之下的渲染速度，人的肉眼，是无法分辨的。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;效率提升在人的感知之外，是无意义的&lt;/h3&gt;

&lt;p&gt;不得不说，react确实是一种很优秀的设计理念，这种设计理念肯定会在其他框架上被继承，被发扬光大&lt;/p&gt;

&lt;p&gt;但是react绝对不是解决方案，只是暂时性的能促进前端从业民工快速进入高潮的一个手段。&lt;/p&gt;

&lt;p&gt;真正的解决方案来临的时候，react，将会如被剥光了底裤的贵妇人惶惶逃离。&lt;/p&gt;

&lt;p&gt;但是，react精神永存，这代表我们这波前端开发者不折腾不舒服斯基的态度。&lt;/p&gt;

</description>
        <pubDate>Wed, 23 Dec 2015 17:21:30 +0800</pubDate>
        <link>http://igaves.com/it/2015/12/23/the-reactnative.html</link>
        <guid isPermaLink="true">http://igaves.com/it/2015/12/23/the-reactnative.html</guid>
        
        
        <category>it</category>
        
      </item>
    
      <item>
        <title>今天，阿里YUNOS 5周年,莫大讲个故事</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;算是三大手机厂商发展史吧&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;话说，瓷器镇上人们主吃面食。&lt;/p&gt;

&lt;p&gt;好多年，都是杂粮磨成面捏窝窝吃。&lt;/p&gt;

&lt;p&gt;一&lt;/p&gt;

&lt;p&gt;后来，镇子外面，有家平锅店，用上等的食材，磨成面，做出来了面包&lt;/p&gt;

&lt;p&gt;顿时风靡全镇。&lt;/p&gt;

&lt;p&gt;未完…&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;内容首发公众账号：莫大艺术家&lt;/h3&gt;
</description>
        <pubDate>Thu, 10 Dec 2015 17:21:30 +0800</pubDate>
        <link>http://igaves.com/it/2015/12/10/ali-yunos-5-year.html</link>
        <guid isPermaLink="true">http://igaves.com/it/2015/12/10/ali-yunos-5-year.html</guid>
        
        
        <category>it</category>
        
      </item>
    
      <item>
        <title>我讨厌雾霾</title>
        <description>&lt;p&gt;我确实讨厌雾霾
前几天雾霾上千的时候，甚至有点胸闷。
但无能为力。&lt;/p&gt;

&lt;p&gt;对于有过长期住院的人来讲，最关注的永远是自己的身体，所以对这种无法掌控的现状只能表现出愤懑。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;北上广不相信眼泪，京津冀你得有好肺&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;去年看到柴静的《穹顶之下》，忍不住想贴一下播放地址
但是找不到。&lt;/p&gt;

&lt;p&gt;有些事懒得多些，记录一下吧。。&lt;/p&gt;

&lt;p&gt;2015年11月27日至12月1日,北京地区大雾霾。&lt;/p&gt;

</description>
        <pubDate>Sun, 06 Dec 2015 20:21:30 +0800</pubDate>
        <link>http://igaves.com/unless/2015/12/06/i-hate-haze.html</link>
        <guid isPermaLink="true">http://igaves.com/unless/2015/12/06/i-hate-haze.html</guid>
        
        
        <category>unless</category>
        
      </item>
    
      <item>
        <title>PHP7，号称很快的语言</title>
        <description>&lt;p&gt;早上听闻php7发布了
说起来自己也曾经写过一阵php7，还是很有感情的，目前对于php只剩下了
语法印象，并没有实际的细节掌握了，所以一下说的，都是闲着扯淡&lt;/p&gt;

&lt;p&gt;貌似5.6－7之间没有其他的版本了，突然蹦到7，肯定是开发者觉得改变的很重大喽。。。
粗略的研究了一下，发现了一个很牛逼的改动&lt;/p&gt;

&lt;p&gt;函数返回值了&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;function fuckBy(array $people):array{
  
  array_map(function( string $name):int{
    fuckingBy($name);
  });
  return $people;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当然，引入了类型声明，和返回类型声明，不快才怪！&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;define(&#39;TRUE&#39;,false);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这也算是进步。&lt;/p&gt;

&lt;p&gt;说下我认为的最重要的改动，就是匿名类;&lt;/p&gt;

&lt;p&gt;假设一个接口IObserver定义了一个方法 notify,那么，在需要一个对象传入的时候可以快速创建匿名类实现这个接口来搞定当前的逻辑
前几天稍微写了一个AWT桌面，发现逻辑简单的时候，这个方式很便捷&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;class MainController extends Controller{
  
  function constructor(){
    //defined some Observer
    $this-&amp;gt;observer = new Observer();

    //new 
    $this-&amp;gt;observer = new class implements IObserver{
        public  function notify($something){
        }
    }
  }


  function actionDrawIndex(){

    $this-&amp;gt;observer-&amp;gt;notify();
    $this-&amp;gt;renderSomething();
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;面向接口编程的重要性在实际开发中，对项目扩展的更好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;总结一下，就是，PHP终于尝试放弃若类型来进行开发了,放弃了若类型，我可以理解成为，可以进行‘编译行为’了，不管是上线编译，还是即时编译
越来越趋向于运行速度这个需求了&lt;/p&gt;

&lt;h3 id=&quot;php&quot;&gt;不过我印象中，PHP从来都不是靠运行速度混江湖的&lt;/h3&gt;

&lt;h3 id=&quot;section&quot;&gt;靠的是学习成本低。&lt;/h3&gt;

&lt;p&gt;未完待。。&lt;/p&gt;

</description>
        <pubDate>Wed, 02 Dec 2015 07:21:30 +0800</pubDate>
        <link>http://igaves.com/developer/2015/12/02/about-php7.html</link>
        <guid isPermaLink="true">http://igaves.com/developer/2015/12/02/about-php7.html</guid>
        
        
        <category>developer</category>
        
      </item>
    
      <item>
        <title>Babel,给JS进化加一把火</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;这玩意以前叫6to5
就是把ES6的东西编译成ES5，也就是说，可以快速进入新的语法逻辑，而且可以兼容旧的浏览器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个重要性不言而喻，其实ES6的语法改版，就是为了推进前端的进化。&lt;/p&gt;

&lt;p&gt;新的开发方式。&lt;/p&gt;

&lt;p&gt;回顾当年Ajax狂潮，其实技术很早就有，然后突然的这种开发方式对整个的互联网进行了全新的诠释，用户体验这个词汇应运而出。&lt;/p&gt;

&lt;p&gt;先说下莫大认为的重要性几点&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function A(){
  this.load();
}
A.prototype.load= {
  //当属于A的dom被点击触发事件拉取
  domBelongToA.onclick=function(){
    Service.loadData().done(B.reDraw);
  }
}

function B(){
}
B.prototype.reDraw = function(data){
  //重会B的页面显示
  domBelongToB.render(data)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，其实，AB两个对象之间，是相互依赖的，而且页面属性也是纠缠的。
不得不说，这就是现在的最常用的开发方式&lt;/p&gt;

&lt;p&gt;即便我们用angular，也得通过一个Service来进行数据的传递&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;angular.module(&#39;app&#39;).service(&#39;loader&#39;,[&#39;$http&#39;,function(){

    return {
      data:{},
      load:function(){
        var _this = this;
        $http.get().done(function(res){
            _this.data = res.data;
        })..
      }
    }
}]);

angular.module(&#39;app&#39;).controller(&#39;A&#39;,[&#39;loader&#39;,function(loader){

    this.load = function(){
      loader.load();
    }
}]);

angular.module(&#39;app&#39;).controller(&#39;B&#39;,[&#39;loader&#39;,function(loader){

    //loader infect
    
}]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个是却是很传统的方式，数据的流向，必须有一层桥接(angular的设计思路已经很先进了)，活着嵌套引用。
谈什么设计模式。&lt;/p&gt;

&lt;p&gt;A其实就是个界面操作，B也是界面操作，那么肯定要进行比较规范化的拆分，界面，数据等等&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export interface IHttpRequest{
  loaded(res:object):void;
  error(res:object):void;
  request(promise:Promise):Promise;
}

class Loader {

  function addEventListner(name:string,handler:IHttpRequest){
    var http:Http = new Http();
    http.url = &#39;xx&#39;;
    //不封装了，其实这里可以HTTP内包含接口实现,写出来参考而已
    http.get(IHttpRequest.request)
      .success(IHttpRequest.loaded)
      .error(IHttpRequest.error);
  }
}

export class B{

    [selector=&quot;domBelongToA&quot;]
    click(event:Event)(
       var loader =  new Loader(); 
       //此处用接口类型解
       loader.addEventListner(&#39;loaded&#39;,this);
       loader.load();
    )

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其实用这中方式，新手老手都必须走一条强行实现接口的过程，
那么基本上可以保证质量维持在一个范围内。&lt;/p&gt;

&lt;p&gt;那么也就是说，babel最深入的意义并不是语言之间的转化，而是期望于语言之间的转化，能引入新的开发方式。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前端开发者的困境&lt;/h2&gt;

&lt;p&gt;纵观前端开发者，基本上都是快餐式开发，左手一个搜索引擎，右手一个浏览器开发者工具
代码不会写上网一搜，页面有问题，就哪里不行点哪里，实在不行卡个断点，so easy。&lt;/p&gt;

&lt;p&gt;回头想象，我们开发渐渐趋向于一个&lt;em&gt;尝试性开发&lt;/em&gt;
那么java是怎么来做的呢，因为编译性语言，总归写几个字，就编译一下调试吧。。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;稍等，今天我去采访一下前IBM测试开发工程师，现在的小米金融大数据开发工程师去，这是我同学，我不能瞎喷。。采访完贴内容。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;未完待续。。 只写半小时，剩下的时间写代码。。
要是想催更新，快收听。&lt;/p&gt;

</description>
        <pubDate>Sun, 29 Nov 2015 20:21:30 +0800</pubDate>
        <link>http://igaves.com/developer/2015/11/29/start-babel.html</link>
        <guid isPermaLink="true">http://igaves.com/developer/2015/11/29/start-babel.html</guid>
        
        
        <category>developer</category>
        
      </item>
    
      <item>
        <title>《速度与激情7》隐藏福利，格斗女王：Ronda Rousey</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;速度激情系列铁粉，但是没想到在最后一步激情系列中，有幸感看到了格斗女王的风骚身影
Rousey柔道运动员出身
一路摔倒奥运会，拿了北京奥运会柔道铜牌。
突然感觉到人生好无聊，瞬间在自己职业生涯巅峰的时候，退役&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;未完…&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;内容首发公众账号：莫大艺术家&lt;/h3&gt;
</description>
        <pubDate>Sat, 28 Nov 2015 17:21:30 +0800</pubDate>
        <link>http://igaves.com/movie/2015/11/28/ronda-ronsey-speed.html</link>
        <guid isPermaLink="true">http://igaves.com/movie/2015/11/28/ronda-ronsey-speed.html</guid>
        
        
        <category>movie</category>
        
      </item>
    
      <item>
        <title>美剧《不死法医》深度解读</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;不死法医》讲述纽约城最优秀的法医、病理学专家Henry Morgan的传奇经历。人们都称赞他是个了不起的人才，但是没有人知道他的身世秘密。他经历过世间的一切——战争、爱情，甚至天花和疟疾——但惟独没有经历过真正的死亡。已经活了200岁的他在公立法医研究所工作，试图通过研究死人来找出自己永生的秘密。务实而顽强的纽约警察局女侦探Jo Martinez既是他的工作搭档，又是唯一能给他的生活带来一抹亮色的人。在Jo的帮助下，通过一个个案件了解Henry漫长的、充满传奇色彩的人生故事&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很可惜的，就是这部片子第一季度播出完成之后，被直接关掉了，因为同期收视率远远不如其他剧集播出的那么高。
但是我是这部片子的真粉丝，带我接下来几天之内，深入分析一下，为何这部片子这么屌&lt;/p&gt;

&lt;p&gt;先发这里，择优发公众账号。&lt;/p&gt;

&lt;p&gt;未完待…&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Nov 2015 09:21:30 +0800</pubDate>
        <link>http://igaves.com/movie/2015/11/26/forever-movie.html</link>
        <guid isPermaLink="true">http://igaves.com/movie/2015/11/26/forever-movie.html</guid>
        
        
        <category>movie</category>
        
      </item>
    
  </channel>
</rss>
